# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import lms_pb2 as lms__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in lms_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LMSStub(object):
    """Service definition for LMS
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/lms.LMS/Register',
                request_serializer=lms__pb2.RegisterRequest.SerializeToString,
                response_deserializer=lms__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Login = channel.unary_unary(
                '/lms.LMS/Login',
                request_serializer=lms__pb2.LoginRequest.SerializeToString,
                response_deserializer=lms__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.Logout = channel.unary_unary(
                '/lms.LMS/Logout',
                request_serializer=lms__pb2.LogoutRequest.SerializeToString,
                response_deserializer=lms__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.Post = channel.unary_unary(
                '/lms.LMS/Post',
                request_serializer=lms__pb2.PostRequest.SerializeToString,
                response_deserializer=lms__pb2.PostResponse.FromString,
                _registered_method=True)
        self.Get = channel.unary_unary(
                '/lms.LMS/Get',
                request_serializer=lms__pb2.GetRequest.SerializeToString,
                response_deserializer=lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.GradeAssignment = channel.unary_unary(
                '/lms.LMS/GradeAssignment',
                request_serializer=lms__pb2.GradeRequest.SerializeToString,
                response_deserializer=lms__pb2.GradeResponse.FromString,
                _registered_method=True)
        self.GetGrade = channel.unary_unary(
                '/lms.LMS/GetGrade',
                request_serializer=lms__pb2.GetGradeRequest.SerializeToString,
                response_deserializer=lms__pb2.GetGradeResponse.FromString,
                _registered_method=True)
        self.GetLLMAnswer = channel.unary_unary(
                '/lms.LMS/GetLLMAnswer',
                request_serializer=lms__pb2.QueryRequest.SerializeToString,
                response_deserializer=lms__pb2.QueryResponse.FromString,
                _registered_method=True)
        self.GetUnansweredQueries = channel.unary_unary(
                '/lms.LMS/GetUnansweredQueries',
                request_serializer=lms__pb2.GetRequest.SerializeToString,
                response_deserializer=lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.RespondToQuery = channel.unary_unary(
                '/lms.LMS/RespondToQuery',
                request_serializer=lms__pb2.PostRequest.SerializeToString,
                response_deserializer=lms__pb2.PostResponse.FromString,
                _registered_method=True)
        self.GetInstructorResponse = channel.unary_unary(
                '/lms.LMS/GetInstructorResponse',
                request_serializer=lms__pb2.GetRequest.SerializeToString,
                response_deserializer=lms__pb2.GetResponse.FromString,
                _registered_method=True)
        self.WhoIsLeader = channel.unary_unary(
                '/lms.LMS/WhoIsLeader',
                request_serializer=lms__pb2.Empty.SerializeToString,
                response_deserializer=lms__pb2.LeaderResponse.FromString,
                _registered_method=True)


class LMSServicer(object):
    """Service definition for LMS
    """

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GradeAssignment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGrade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLLMAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUnansweredQueries(self, request, context):
        """Instructor views unanswered queries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RespondToQuery(self, request, context):
        """Instructor replies to queries
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetInstructorResponse(self, request, context):
        """Students get responses from instructors
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhoIsLeader(self, request, context):
        """New RPC to get the current leader (88)
        New: Identify current leader for client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LMSServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=lms__pb2.RegisterRequest.FromString,
                    response_serializer=lms__pb2.RegisterResponse.SerializeToString,
            ),
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=lms__pb2.LoginRequest.FromString,
                    response_serializer=lms__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=lms__pb2.LogoutRequest.FromString,
                    response_serializer=lms__pb2.LogoutResponse.SerializeToString,
            ),
            'Post': grpc.unary_unary_rpc_method_handler(
                    servicer.Post,
                    request_deserializer=lms__pb2.PostRequest.FromString,
                    response_serializer=lms__pb2.PostResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=lms__pb2.GetRequest.FromString,
                    response_serializer=lms__pb2.GetResponse.SerializeToString,
            ),
            'GradeAssignment': grpc.unary_unary_rpc_method_handler(
                    servicer.GradeAssignment,
                    request_deserializer=lms__pb2.GradeRequest.FromString,
                    response_serializer=lms__pb2.GradeResponse.SerializeToString,
            ),
            'GetGrade': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGrade,
                    request_deserializer=lms__pb2.GetGradeRequest.FromString,
                    response_serializer=lms__pb2.GetGradeResponse.SerializeToString,
            ),
            'GetLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswer,
                    request_deserializer=lms__pb2.QueryRequest.FromString,
                    response_serializer=lms__pb2.QueryResponse.SerializeToString,
            ),
            'GetUnansweredQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUnansweredQueries,
                    request_deserializer=lms__pb2.GetRequest.FromString,
                    response_serializer=lms__pb2.GetResponse.SerializeToString,
            ),
            'RespondToQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.RespondToQuery,
                    request_deserializer=lms__pb2.PostRequest.FromString,
                    response_serializer=lms__pb2.PostResponse.SerializeToString,
            ),
            'GetInstructorResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetInstructorResponse,
                    request_deserializer=lms__pb2.GetRequest.FromString,
                    response_serializer=lms__pb2.GetResponse.SerializeToString,
            ),
            'WhoIsLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.WhoIsLeader,
                    request_deserializer=lms__pb2.Empty.FromString,
                    response_serializer=lms__pb2.LeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.LMS', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.LMS', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LMS(object):
    """Service definition for LMS
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Register',
            lms__pb2.RegisterRequest.SerializeToString,
            lms__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Login',
            lms__pb2.LoginRequest.SerializeToString,
            lms__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Logout',
            lms__pb2.LogoutRequest.SerializeToString,
            lms__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Post',
            lms__pb2.PostRequest.SerializeToString,
            lms__pb2.PostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/Get',
            lms__pb2.GetRequest.SerializeToString,
            lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GradeAssignment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GradeAssignment',
            lms__pb2.GradeRequest.SerializeToString,
            lms__pb2.GradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetGrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetGrade',
            lms__pb2.GetGradeRequest.SerializeToString,
            lms__pb2.GetGradeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetLLMAnswer',
            lms__pb2.QueryRequest.SerializeToString,
            lms__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetUnansweredQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetUnansweredQueries',
            lms__pb2.GetRequest.SerializeToString,
            lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RespondToQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/RespondToQuery',
            lms__pb2.PostRequest.SerializeToString,
            lms__pb2.PostResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetInstructorResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/GetInstructorResponse',
            lms__pb2.GetRequest.SerializeToString,
            lms__pb2.GetResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WhoIsLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.LMS/WhoIsLeader',
            lms__pb2.Empty.SerializeToString,
            lms__pb2.LeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TutoringStub(object):
    """Tutoring server for LLM-based assistance
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetLLMAnswer = channel.unary_unary(
                '/lms.Tutoring/GetLLMAnswer',
                request_serializer=lms__pb2.QueryRequest.SerializeToString,
                response_deserializer=lms__pb2.QueryResponse.FromString,
                _registered_method=True)


class TutoringServicer(object):
    """Tutoring server for LLM-based assistance
    """

    def GetLLMAnswer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TutoringServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetLLMAnswer': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLLMAnswer,
                    request_deserializer=lms__pb2.QueryRequest.FromString,
                    response_serializer=lms__pb2.QueryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.Tutoring', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.Tutoring', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Tutoring(object):
    """Tutoring server for LLM-based assistance
    """

    @staticmethod
    def GetLLMAnswer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.Tutoring/GetLLMAnswer',
            lms__pb2.QueryRequest.SerializeToString,
            lms__pb2.QueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class RaftServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestVote = channel.unary_unary(
                '/lms.RaftService/RequestVote',
                request_serializer=lms__pb2.RequestVoteRequest.SerializeToString,
                response_deserializer=lms__pb2.RequestVoteResponse.FromString,
                _registered_method=True)
        self.AppendEntries = channel.unary_unary(
                '/lms.RaftService/AppendEntries',
                request_serializer=lms__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=lms__pb2.AppendEntriesResponse.FromString,
                _registered_method=True)
        self.SetVal = channel.unary_unary(
                '/lms.RaftService/SetVal',
                request_serializer=lms__pb2.SetValRequest.SerializeToString,
                response_deserializer=lms__pb2.SetValResponse.FromString,
                _registered_method=True)
        self.GetVal = channel.unary_unary(
                '/lms.RaftService/GetVal',
                request_serializer=lms__pb2.GetValRequest.SerializeToString,
                response_deserializer=lms__pb2.GetValResponse.FromString,
                _registered_method=True)
        self.GetLeader = channel.unary_unary(
                '/lms.RaftService/GetLeader',
                request_serializer=lms__pb2.GetLeaderRequest.SerializeToString,
                response_deserializer=lms__pb2.GetLeaderResponse.FromString,
                _registered_method=True)
        self.WhoIsLeader = channel.unary_unary(
                '/lms.RaftService/WhoIsLeader',
                request_serializer=lms__pb2.Empty.SerializeToString,
                response_deserializer=lms__pb2.LeaderResponse.FromString,
                _registered_method=True)


class RaftServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RequestVote(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AppendEntries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVal(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhoIsLeader(self, request, context):
        """New RPC to get the current leader (88)
        New: Identify current leader for client
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestVote': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestVote,
                    request_deserializer=lms__pb2.RequestVoteRequest.FromString,
                    response_serializer=lms__pb2.RequestVoteResponse.SerializeToString,
            ),
            'AppendEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.AppendEntries,
                    request_deserializer=lms__pb2.AppendEntriesRequest.FromString,
                    response_serializer=lms__pb2.AppendEntriesResponse.SerializeToString,
            ),
            'SetVal': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVal,
                    request_deserializer=lms__pb2.SetValRequest.FromString,
                    response_serializer=lms__pb2.SetValResponse.SerializeToString,
            ),
            'GetVal': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVal,
                    request_deserializer=lms__pb2.GetValRequest.FromString,
                    response_serializer=lms__pb2.GetValResponse.SerializeToString,
            ),
            'GetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeader,
                    request_deserializer=lms__pb2.GetLeaderRequest.FromString,
                    response_serializer=lms__pb2.GetLeaderResponse.SerializeToString,
            ),
            'WhoIsLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.WhoIsLeader,
                    request_deserializer=lms__pb2.Empty.FromString,
                    response_serializer=lms__pb2.LeaderResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.RaftService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.RaftService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class RaftService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RequestVote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/RequestVote',
            lms__pb2.RequestVoteRequest.SerializeToString,
            lms__pb2.RequestVoteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AppendEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/AppendEntries',
            lms__pb2.AppendEntriesRequest.SerializeToString,
            lms__pb2.AppendEntriesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetVal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/SetVal',
            lms__pb2.SetValRequest.SerializeToString,
            lms__pb2.SetValResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/GetVal',
            lms__pb2.GetValRequest.SerializeToString,
            lms__pb2.GetValResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/GetLeader',
            lms__pb2.GetLeaderRequest.SerializeToString,
            lms__pb2.GetLeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WhoIsLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.RaftService/WhoIsLeader',
            lms__pb2.Empty.SerializeToString,
            lms__pb2.LeaderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FileTransferServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendFile = channel.stream_unary(
                '/lms.FileTransferService/SendFile',
                request_serializer=lms__pb2.FileChunk.SerializeToString,
                response_deserializer=lms__pb2.FileTransferResponse.FromString,
                _registered_method=True)
        self.ReplicateData = channel.unary_unary(
                '/lms.FileTransferService/ReplicateData',
                request_serializer=lms__pb2.ReplicateDataRequest.SerializeToString,
                response_deserializer=lms__pb2.ReplicateDataResponse.FromString,
                _registered_method=True)


class FileTransferServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendFile(self, request_iterator, context):
        """Stream file from leader to follower
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReplicateData(self, request, context):
        """New RPC for data replication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileTransferServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendFile': grpc.stream_unary_rpc_method_handler(
                    servicer.SendFile,
                    request_deserializer=lms__pb2.FileChunk.FromString,
                    response_serializer=lms__pb2.FileTransferResponse.SerializeToString,
            ),
            'ReplicateData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicateData,
                    request_deserializer=lms__pb2.ReplicateDataRequest.FromString,
                    response_serializer=lms__pb2.ReplicateDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'lms.FileTransferService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('lms.FileTransferService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileTransferService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/lms.FileTransferService/SendFile',
            lms__pb2.FileChunk.SerializeToString,
            lms__pb2.FileTransferResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ReplicateData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/lms.FileTransferService/ReplicateData',
            lms__pb2.ReplicateDataRequest.SerializeToString,
            lms__pb2.ReplicateDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
